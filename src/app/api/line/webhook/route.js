// src/app/api/line/webhook/route.js
export const runtime = "nodejs";

import { NextResponse } from "next/server";
import { verifySignature, replyMessage, envStatus } from "../../../lib/line";

/**
 * ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ Production:
 * - ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡πÄ‡∏á‡∏µ‡∏¢‡∏ö)
 * - ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "register" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏Ñ‡∏£‡∏Å‡πá‡∏ï‡∏≤‡∏°‡∏î‡∏π userId/groupId ‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ
 * - ‡πÉ‡∏ä‡πâ /api/line/notify-order ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á admin ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
 */

export async function GET() {
  const ok = envStatus();
  const allSet = ok.LINE_CHANNEL_SECRET && ok.LINE_CHANNEL_ACCESS_TOKEN;
  return new Response(allSet ? "LINE Webhook Ready ‚úÖ" : `‚ùå Missing ENV: ${JSON.stringify(ok)}`, {
    status: 200,
  });
}

export async function HEAD() {
  return new Response(null, { status: 200 });
}

export async function POST(req) {
  try {
    const signature = req.headers.get("x-line-signature") || "";
    const rawBody = await req.text();

    if (!verifySignature(rawBody, signature)) {
      return NextResponse.json({ ok: false, error: "Invalid Signature" }, { status: 401 });
    }

    const body = JSON.parse(rawBody || "{}");
    const events = Array.isArray(body?.events) ? body.events : [];

    for (const ev of events) {
      const type = ev?.type;
      const replyToken = ev?.replyToken;
      const sourceType = ev?.source?.type;
      const userId = ev?.source?.userId;
      const groupId = ev?.source?.groupId;
      const roomId = ev?.source?.roomId;

      // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏Ç‡∏≠‡∏î‡∏π userId/groupId ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "register" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      if (type === "message" && ev?.message?.type === "text" && replyToken) {
        const text = String(ev.message.text || "").trim().toLowerCase();
        if (text === "register" || text === "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô") {
          await replyMessage(replyToken, [
            {
              type: "text",
              text:
                "üîë ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ push message:\n" +
                (userId ? `userId: ${userId}\n` : "") +
                (groupId ? `groupId: ${groupId}\n` : "") +
                (roomId ? `roomId: ${roomId}\n` : ""),
            },
          ]);
        }
        // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô "‡πÄ‡∏á‡∏µ‡∏¢‡∏ö" ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö
      }

      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠ join/follow ‡πÉ‡∏ô production (‡πÄ‡∏á‡∏µ‡∏¢‡∏ö)
      if (type === "join" || type === "follow") {
        // no-op
      }
    }

    return NextResponse.json({ ok: true });
  } catch (e) {
    console.error("Webhook error:", e);
    return NextResponse.json({ ok: false, error: e?.message || String(e) }, { status: 500 });
  }
}
